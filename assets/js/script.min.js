//LI class constructor
function List(obj) {
    this.listObject = obj;
    this.parent = obj.parentNode;
}

//Li class methods
List.prototype.getListObject = function() {
        return this.listObject;
};

List.prototype.init = function () {
    var listObj = this.getListObject(),
        $self = this;

    listObj.setAttribute("draggable", "true");

    listObj.ondragstart = function (ev) {
        $self.drag(ev);
    };
};

List.prototype.drag = function(ev) {
    this.getListObject().setAttribute("id", "drag_object");
    ev.dataTransfer.setData('object', this.getListObject().id);
};

//UL class constructor
function Ul(obj) {
    this.ulObject = obj;
}

//UL class methods
Ul.prototype.getUlObject =  function() {
    return this.ulObject;
};

Ul.prototype.allowDrop =  function (ev) {
    ev.preventDefault();
};

Ul.prototype.drop = function(ev) {
    ev.preventDefault();

    var data = ev.dataTransfer.getData('object');

    this.addLi(ev, data);
    this.showBehavior();
};

Ul.prototype.addLi = function(ev, data) {
    if(this.getUlObject().childElementCount === 0) {
        ev.target.appendChild(document.getElementById(data));
    }else {
        ev.target.parentElement.appendChild(document.getElementById(data));
    }

    document.getElementById(data).removeAttribute('id');
};

Ul.prototype.showBehavior = function() {};

Ul.prototype.init = function() {
    var obj = this.getUlObject(),
        $self = this;

    obj.ondragover = function(ev) {
        $self.allowDrop(ev);
    };

    obj.ondrop = function(ev) {
        $self.drop(ev);
    };
};

//UL class constructor
function UlBordered(obj) {
    this.ulObject = obj;
}

//UL inheritance
UlBordered.prototype = Object.create(Ul.prototype);

UlBordered.prototype.constructor = UlBordered;

//UL class methods
UlBordered.prototype.showBehavior = function () {
    var $self = this;

    $self.getUlObject().classList.add('b-list__bordered');

    setTimeout(function() {
        $self.getUlObject().classList.remove('b-list__bordered');
    }, 200);
};

//UL class constructor
function UlBackgrounded(obj) {
    this.ulObject = obj;
}

//UL inheritance
UlBackgrounded.prototype = Object.create(Ul.prototype);

UlBackgrounded.prototype.constructor = UlBackgrounded;

//UL class methods
UlBackgrounded.prototype.showBehavior = function () {
    var $self = this;

    $self.getUlObject().classList.add('b-list__bordered_with-background');

    setTimeout(function() {
        $self.getUlObject().classList.remove('b-list__bordered_with-background');
    }, 200);
};

UlBackgrounded.prototype.addLi = function(ev, data) {
    var movedObj = document.getElementById(data),
        cloneObj = movedObj.cloneNode(true);

    cloneObj.removeAttribute('id');

    if(this.getUlObject().childElementCount === 0) {
        ev.target.appendChild(movedObj);
    }else {
        ev.target.parentElement.appendChild(movedObj);
    }

    document.getElementsByClassName('b-list')[0].appendChild(cloneObj);
    document.getElementById(data).removeAttribute('id');

    new List(cloneObj).init();
};

var ulLen = document.getElementsByClassName('b-list').length,
    liLen = document.getElementsByClassName('b-list-item').length,
    liArr = [];

for(var i=ulLen; i--;) {
    var ulItem = document.getElementsByClassName('b-list')[i],
        ulObj;


    if (i===2) {
        ulObj = new UlBackgrounded(ulItem);
    }
    else if (i===1) {
        ulObj = new UlBordered(ulItem);
    }
    else {
        ulObj = new Ul(ulItem);
    }
    ulObj.init();
}

for(var j=liLen; j--;) {
    var liItem = document.getElementsByClassName('b-list-item')[j],
        liObj = new List(liItem);

    liObj.init();

    liArr.push(liObj);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkxJc3QuQ2xhc3MuanMiLCJVbC5DbGFzcy5qcyIsImFwcC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUMxQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQzFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoic2NyaXB0Lm1pbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vTEkgY2xhc3MgY29uc3RydWN0b3JcbmZ1bmN0aW9uIExpc3Qob2JqKSB7XG4gICAgdGhpcy5saXN0T2JqZWN0ID0gb2JqO1xuICAgIHRoaXMucGFyZW50ID0gb2JqLnBhcmVudE5vZGU7XG59XG5cbi8vTGkgY2xhc3MgbWV0aG9kc1xuTGlzdC5wcm90b3R5cGUuZ2V0TGlzdE9iamVjdCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5saXN0T2JqZWN0O1xufTtcblxuTGlzdC5wcm90b3R5cGUuaW5pdCA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgbGlzdE9iaiA9IHRoaXMuZ2V0TGlzdE9iamVjdCgpLFxuICAgICAgICAkc2VsZiA9IHRoaXM7XG5cbiAgICBsaXN0T2JqLnNldEF0dHJpYnV0ZShcImRyYWdnYWJsZVwiLCBcInRydWVcIik7XG5cbiAgICBsaXN0T2JqLm9uZHJhZ3N0YXJ0ID0gZnVuY3Rpb24gKGV2KSB7XG4gICAgICAgICRzZWxmLmRyYWcoZXYpO1xuICAgIH07XG59O1xuXG5MaXN0LnByb3RvdHlwZS5kcmFnID0gZnVuY3Rpb24oZXYpIHtcbiAgICB0aGlzLmdldExpc3RPYmplY3QoKS5zZXRBdHRyaWJ1dGUoXCJpZFwiLCBcImRyYWdfb2JqZWN0XCIpO1xuICAgIGV2LmRhdGFUcmFuc2Zlci5zZXREYXRhKCdvYmplY3QnLCB0aGlzLmdldExpc3RPYmplY3QoKS5pZCk7XG59O1xuIiwiLy9VTCBjbGFzcyBjb25zdHJ1Y3RvclxuZnVuY3Rpb24gVWwob2JqKSB7XG4gICAgdGhpcy51bE9iamVjdCA9IG9iajtcbn1cblxuLy9VTCBjbGFzcyBtZXRob2RzXG5VbC5wcm90b3R5cGUuZ2V0VWxPYmplY3QgPSAgZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMudWxPYmplY3Q7XG59O1xuXG5VbC5wcm90b3R5cGUuYWxsb3dEcm9wID0gIGZ1bmN0aW9uIChldikge1xuICAgIGV2LnByZXZlbnREZWZhdWx0KCk7XG59O1xuXG5VbC5wcm90b3R5cGUuZHJvcCA9IGZ1bmN0aW9uKGV2KSB7XG4gICAgZXYucHJldmVudERlZmF1bHQoKTtcblxuICAgIHZhciBkYXRhID0gZXYuZGF0YVRyYW5zZmVyLmdldERhdGEoJ29iamVjdCcpO1xuXG4gICAgdGhpcy5hZGRMaShldiwgZGF0YSk7XG4gICAgdGhpcy5zaG93QmVoYXZpb3IoKTtcbn07XG5cblVsLnByb3RvdHlwZS5hZGRMaSA9IGZ1bmN0aW9uKGV2LCBkYXRhKSB7XG4gICAgaWYodGhpcy5nZXRVbE9iamVjdCgpLmNoaWxkRWxlbWVudENvdW50ID09PSAwKSB7XG4gICAgICAgIGV2LnRhcmdldC5hcHBlbmRDaGlsZChkb2N1bWVudC5nZXRFbGVtZW50QnlJZChkYXRhKSk7XG4gICAgfWVsc2Uge1xuICAgICAgICBldi50YXJnZXQucGFyZW50RWxlbWVudC5hcHBlbmRDaGlsZChkb2N1bWVudC5nZXRFbGVtZW50QnlJZChkYXRhKSk7XG4gICAgfVxuXG4gICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoZGF0YSkucmVtb3ZlQXR0cmlidXRlKCdpZCcpO1xufTtcblxuVWwucHJvdG90eXBlLnNob3dCZWhhdmlvciA9IGZ1bmN0aW9uKCkge307XG5cblVsLnByb3RvdHlwZS5pbml0ID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIG9iaiA9IHRoaXMuZ2V0VWxPYmplY3QoKSxcbiAgICAgICAgJHNlbGYgPSB0aGlzO1xuXG4gICAgb2JqLm9uZHJhZ292ZXIgPSBmdW5jdGlvbihldikge1xuICAgICAgICAkc2VsZi5hbGxvd0Ryb3AoZXYpO1xuICAgIH07XG5cbiAgICBvYmoub25kcm9wID0gZnVuY3Rpb24oZXYpIHtcbiAgICAgICAgJHNlbGYuZHJvcChldik7XG4gICAgfTtcbn07XG5cbi8vVUwgY2xhc3MgY29uc3RydWN0b3JcbmZ1bmN0aW9uIFVsQm9yZGVyZWQob2JqKSB7XG4gICAgdGhpcy51bE9iamVjdCA9IG9iajtcbn1cblxuLy9VTCBpbmhlcml0YW5jZVxuVWxCb3JkZXJlZC5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKFVsLnByb3RvdHlwZSk7XG5cblVsQm9yZGVyZWQucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gVWxCb3JkZXJlZDtcblxuLy9VTCBjbGFzcyBtZXRob2RzXG5VbEJvcmRlcmVkLnByb3RvdHlwZS5zaG93QmVoYXZpb3IgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyICRzZWxmID0gdGhpcztcblxuICAgICRzZWxmLmdldFVsT2JqZWN0KCkuY2xhc3NMaXN0LmFkZCgnYi1saXN0X19ib3JkZXJlZCcpO1xuXG4gICAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgJHNlbGYuZ2V0VWxPYmplY3QoKS5jbGFzc0xpc3QucmVtb3ZlKCdiLWxpc3RfX2JvcmRlcmVkJyk7XG4gICAgfSwgMjAwKTtcbn07XG5cbi8vVUwgY2xhc3MgY29uc3RydWN0b3JcbmZ1bmN0aW9uIFVsQmFja2dyb3VuZGVkKG9iaikge1xuICAgIHRoaXMudWxPYmplY3QgPSBvYmo7XG59XG5cbi8vVUwgaW5oZXJpdGFuY2VcblVsQmFja2dyb3VuZGVkLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoVWwucHJvdG90eXBlKTtcblxuVWxCYWNrZ3JvdW5kZWQucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gVWxCYWNrZ3JvdW5kZWQ7XG5cbi8vVUwgY2xhc3MgbWV0aG9kc1xuVWxCYWNrZ3JvdW5kZWQucHJvdG90eXBlLnNob3dCZWhhdmlvciA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgJHNlbGYgPSB0aGlzO1xuXG4gICAgJHNlbGYuZ2V0VWxPYmplY3QoKS5jbGFzc0xpc3QuYWRkKCdiLWxpc3RfX2JvcmRlcmVkX3dpdGgtYmFja2dyb3VuZCcpO1xuXG4gICAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgJHNlbGYuZ2V0VWxPYmplY3QoKS5jbGFzc0xpc3QucmVtb3ZlKCdiLWxpc3RfX2JvcmRlcmVkX3dpdGgtYmFja2dyb3VuZCcpO1xuICAgIH0sIDIwMCk7XG59O1xuXG5VbEJhY2tncm91bmRlZC5wcm90b3R5cGUuYWRkTGkgPSBmdW5jdGlvbihldiwgZGF0YSkge1xuICAgIHZhciBtb3ZlZE9iaiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGRhdGEpLFxuICAgICAgICBjbG9uZU9iaiA9IG1vdmVkT2JqLmNsb25lTm9kZSh0cnVlKTtcblxuICAgIGNsb25lT2JqLnJlbW92ZUF0dHJpYnV0ZSgnaWQnKTtcblxuICAgIGlmKHRoaXMuZ2V0VWxPYmplY3QoKS5jaGlsZEVsZW1lbnRDb3VudCA9PT0gMCkge1xuICAgICAgICBldi50YXJnZXQuYXBwZW5kQ2hpbGQobW92ZWRPYmopO1xuICAgIH1lbHNlIHtcbiAgICAgICAgZXYudGFyZ2V0LnBhcmVudEVsZW1lbnQuYXBwZW5kQ2hpbGQobW92ZWRPYmopO1xuICAgIH1cblxuICAgIGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJ2ItbGlzdCcpWzBdLmFwcGVuZENoaWxkKGNsb25lT2JqKTtcbiAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChkYXRhKS5yZW1vdmVBdHRyaWJ1dGUoJ2lkJyk7XG5cbiAgICBuZXcgTGlzdChjbG9uZU9iaikuaW5pdCgpO1xufTsiLCJcbnZhciB1bExlbiA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJ2ItbGlzdCcpLmxlbmd0aCxcbiAgICBsaUxlbiA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJ2ItbGlzdC1pdGVtJykubGVuZ3RoLFxuICAgIGxpQXJyID0gW107XG5cbmZvcih2YXIgaT11bExlbjsgaS0tOykge1xuICAgIHZhciB1bEl0ZW0gPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCdiLWxpc3QnKVtpXSxcbiAgICAgICAgdWxPYmo7XG5cblxuICAgIGlmIChpPT09Mikge1xuICAgICAgICB1bE9iaiA9IG5ldyBVbEJhY2tncm91bmRlZCh1bEl0ZW0pO1xuICAgIH1cbiAgICBlbHNlIGlmIChpPT09MSkge1xuICAgICAgICB1bE9iaiA9IG5ldyBVbEJvcmRlcmVkKHVsSXRlbSk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICB1bE9iaiA9IG5ldyBVbCh1bEl0ZW0pO1xuICAgIH1cbiAgICB1bE9iai5pbml0KCk7XG59XG5cbmZvcih2YXIgaj1saUxlbjsgai0tOykge1xuICAgIHZhciBsaUl0ZW0gPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCdiLWxpc3QtaXRlbScpW2pdLFxuICAgICAgICBsaU9iaiA9IG5ldyBMaXN0KGxpSXRlbSk7XG5cbiAgICBsaU9iai5pbml0KCk7XG5cbiAgICBsaUFyci5wdXNoKGxpT2JqKTtcbn0iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=
