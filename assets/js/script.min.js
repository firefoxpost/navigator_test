//LI class constructor
function List(obj) {
    this.listObject = obj;
}

//Li class methods
List.prototype.getListObject = function() {
        return this.listObject;
};

List.prototype.init = function () {
    var listObj = this.getListObject(),
        $self = this;

    listObj.setAttribute("draggable", "true");

    listObj.ondragstart = function (ev) {
        $self.drag(ev);
    };
};

List.prototype.drag = function(ev) {
    this.getListObject().setAttribute("id", "drag_object");
    ev.dataTransfer.setData('object', this.getListObject().id);
};

//UL class constructor
function Ul(obj) {
    this.ulObject = obj;
}

//UL class methods
Ul.prototype.getUlObject =  function() {
    return this.ulObject;
};

Ul.prototype.allowDrop =  function (ev) {
    ev.preventDefault();
};

Ul.prototype.drop = function(ev) {
    ev.preventDefault();

    var data = ev.dataTransfer.getData('object');

    this.addLi(ev, data);
    this.showBehavior();
};

Ul.prototype.addLi = function(ev, data) {
    if(this.getUlObject().childElementCount === 0) {
        ev.target.appendChild(document.getElementById(data));
    }else {
        ev.target.parentElement.appendChild(document.getElementById(data));
    }

    document.getElementById(data).removeAttribute('id');
};

Ul.prototype.showBehavior = function() {
    return true;
};

Ul.prototype.init = function() {
    var obj = this.getUlObject(),
        $self = this;

    obj.ondragover = function(ev) {
        $self.allowDrop(ev);
    };

    obj.ondrop = function(ev) {
        $self.drop(ev);
    };
};

//UL class constructor
function UlBordered(obj) {
    this.ulObject = obj;
}

//UL inheritance
UlBordered.prototype = Object.create(Ul.prototype);

UlBordered.prototype.constructor = UlBordered;

//UL class methods
UlBordered.prototype.showBehavior = function () {
    var $self = this;

    $self.getUlObject().classList.add('b-list__bordered');

    setTimeout(function() {
        $self.getUlObject().classList.remove('b-list__bordered');
    }, 200);
};

//UL class constructor
function UlBackgrounded(obj) {
    this.ulObject = obj;
}

//UL inheritance
UlBackgrounded.prototype = Object.create(Ul.prototype);

UlBackgrounded.prototype.constructor = UlBackgrounded;

//UL class methods
UlBackgrounded.prototype.showBehavior = function () {
    var $self = this;

    $self.getUlObject().classList.add('b-list__bordered_with-background');

    setTimeout(function() {
        $self.getUlObject().classList.remove('b-list__bordered_with-background');
    }, 200);
};

UlBackgrounded.prototype.addLi = function(ev, data) {
    var movedObj = document.getElementById(data),
        cloneObj = movedObj.cloneNode(true);

    cloneObj.removeAttribute('id');

    if(this.getUlObject().childElementCount === 0) {
        ev.target.appendChild(movedObj);
    }else {
        ev.target.parentElement.appendChild(movedObj);
    }

    document.getElementsByClassName('b-list')[0].appendChild(cloneObj);
    document.getElementById(data).removeAttribute('id');

    new List(cloneObj).init();
};

var ulLen = document.getElementsByClassName('b-list').length,
    liLen = document.getElementsByClassName('b-list-item').length,
    liArr = [];

for(var i=ulLen; i--;) {
    var ulItem = document.getElementsByClassName('b-list')[i],
        ulObj;


    if (i===2) {
        ulObj = new UlBackgrounded(ulItem);
    }
    else if (i===1) {
        ulObj = new UlBordered(ulItem);
    }
    else {
        ulObj = new Ul(ulItem);
    }
    ulObj.init();
}

for(var j=liLen; j--;) {
    var liItem = document.getElementsByClassName('b-list-item')[j],
        liObj = new List(liItem);

    liObj.init();

    liArr.push(liObj);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkxJc3QuQ2xhc3MuanMiLCJVbC5DbGFzcy5qcyIsImFwcC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FDekJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FDNUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiJzY3JpcHQubWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy9MSSBjbGFzcyBjb25zdHJ1Y3RvclxuZnVuY3Rpb24gTGlzdChvYmopIHtcbiAgICB0aGlzLmxpc3RPYmplY3QgPSBvYmo7XG59XG5cbi8vTGkgY2xhc3MgbWV0aG9kc1xuTGlzdC5wcm90b3R5cGUuZ2V0TGlzdE9iamVjdCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5saXN0T2JqZWN0O1xufTtcblxuTGlzdC5wcm90b3R5cGUuaW5pdCA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgbGlzdE9iaiA9IHRoaXMuZ2V0TGlzdE9iamVjdCgpLFxuICAgICAgICAkc2VsZiA9IHRoaXM7XG5cbiAgICBsaXN0T2JqLnNldEF0dHJpYnV0ZShcImRyYWdnYWJsZVwiLCBcInRydWVcIik7XG5cbiAgICBsaXN0T2JqLm9uZHJhZ3N0YXJ0ID0gZnVuY3Rpb24gKGV2KSB7XG4gICAgICAgICRzZWxmLmRyYWcoZXYpO1xuICAgIH07XG59O1xuXG5MaXN0LnByb3RvdHlwZS5kcmFnID0gZnVuY3Rpb24oZXYpIHtcbiAgICB0aGlzLmdldExpc3RPYmplY3QoKS5zZXRBdHRyaWJ1dGUoXCJpZFwiLCBcImRyYWdfb2JqZWN0XCIpO1xuICAgIGV2LmRhdGFUcmFuc2Zlci5zZXREYXRhKCdvYmplY3QnLCB0aGlzLmdldExpc3RPYmplY3QoKS5pZCk7XG59O1xuIiwiLy9VTCBjbGFzcyBjb25zdHJ1Y3RvclxuZnVuY3Rpb24gVWwob2JqKSB7XG4gICAgdGhpcy51bE9iamVjdCA9IG9iajtcbn1cblxuLy9VTCBjbGFzcyBtZXRob2RzXG5VbC5wcm90b3R5cGUuZ2V0VWxPYmplY3QgPSAgZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMudWxPYmplY3Q7XG59O1xuXG5VbC5wcm90b3R5cGUuYWxsb3dEcm9wID0gIGZ1bmN0aW9uIChldikge1xuICAgIGV2LnByZXZlbnREZWZhdWx0KCk7XG59O1xuXG5VbC5wcm90b3R5cGUuZHJvcCA9IGZ1bmN0aW9uKGV2KSB7XG4gICAgZXYucHJldmVudERlZmF1bHQoKTtcblxuICAgIHZhciBkYXRhID0gZXYuZGF0YVRyYW5zZmVyLmdldERhdGEoJ29iamVjdCcpO1xuXG4gICAgdGhpcy5hZGRMaShldiwgZGF0YSk7XG4gICAgdGhpcy5zaG93QmVoYXZpb3IoKTtcbn07XG5cblVsLnByb3RvdHlwZS5hZGRMaSA9IGZ1bmN0aW9uKGV2LCBkYXRhKSB7XG4gICAgaWYodGhpcy5nZXRVbE9iamVjdCgpLmNoaWxkRWxlbWVudENvdW50ID09PSAwKSB7XG4gICAgICAgIGV2LnRhcmdldC5hcHBlbmRDaGlsZChkb2N1bWVudC5nZXRFbGVtZW50QnlJZChkYXRhKSk7XG4gICAgfWVsc2Uge1xuICAgICAgICBldi50YXJnZXQucGFyZW50RWxlbWVudC5hcHBlbmRDaGlsZChkb2N1bWVudC5nZXRFbGVtZW50QnlJZChkYXRhKSk7XG4gICAgfVxuXG4gICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoZGF0YSkucmVtb3ZlQXR0cmlidXRlKCdpZCcpO1xufTtcblxuVWwucHJvdG90eXBlLnNob3dCZWhhdmlvciA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0cnVlO1xufTtcblxuVWwucHJvdG90eXBlLmluaXQgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgb2JqID0gdGhpcy5nZXRVbE9iamVjdCgpLFxuICAgICAgICAkc2VsZiA9IHRoaXM7XG5cbiAgICBvYmoub25kcmFnb3ZlciA9IGZ1bmN0aW9uKGV2KSB7XG4gICAgICAgICRzZWxmLmFsbG93RHJvcChldik7XG4gICAgfTtcblxuICAgIG9iai5vbmRyb3AgPSBmdW5jdGlvbihldikge1xuICAgICAgICAkc2VsZi5kcm9wKGV2KTtcbiAgICB9O1xufTtcblxuLy9VTCBjbGFzcyBjb25zdHJ1Y3RvclxuZnVuY3Rpb24gVWxCb3JkZXJlZChvYmopIHtcbiAgICB0aGlzLnVsT2JqZWN0ID0gb2JqO1xufVxuXG4vL1VMIGluaGVyaXRhbmNlXG5VbEJvcmRlcmVkLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoVWwucHJvdG90eXBlKTtcblxuVWxCb3JkZXJlZC5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBVbEJvcmRlcmVkO1xuXG4vL1VMIGNsYXNzIG1ldGhvZHNcblVsQm9yZGVyZWQucHJvdG90eXBlLnNob3dCZWhhdmlvciA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgJHNlbGYgPSB0aGlzO1xuXG4gICAgJHNlbGYuZ2V0VWxPYmplY3QoKS5jbGFzc0xpc3QuYWRkKCdiLWxpc3RfX2JvcmRlcmVkJyk7XG5cbiAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICAkc2VsZi5nZXRVbE9iamVjdCgpLmNsYXNzTGlzdC5yZW1vdmUoJ2ItbGlzdF9fYm9yZGVyZWQnKTtcbiAgICB9LCAyMDApO1xufTtcblxuLy9VTCBjbGFzcyBjb25zdHJ1Y3RvclxuZnVuY3Rpb24gVWxCYWNrZ3JvdW5kZWQob2JqKSB7XG4gICAgdGhpcy51bE9iamVjdCA9IG9iajtcbn1cblxuLy9VTCBpbmhlcml0YW5jZVxuVWxCYWNrZ3JvdW5kZWQucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShVbC5wcm90b3R5cGUpO1xuXG5VbEJhY2tncm91bmRlZC5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBVbEJhY2tncm91bmRlZDtcblxuLy9VTCBjbGFzcyBtZXRob2RzXG5VbEJhY2tncm91bmRlZC5wcm90b3R5cGUuc2hvd0JlaGF2aW9yID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciAkc2VsZiA9IHRoaXM7XG5cbiAgICAkc2VsZi5nZXRVbE9iamVjdCgpLmNsYXNzTGlzdC5hZGQoJ2ItbGlzdF9fYm9yZGVyZWRfd2l0aC1iYWNrZ3JvdW5kJyk7XG5cbiAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICAkc2VsZi5nZXRVbE9iamVjdCgpLmNsYXNzTGlzdC5yZW1vdmUoJ2ItbGlzdF9fYm9yZGVyZWRfd2l0aC1iYWNrZ3JvdW5kJyk7XG4gICAgfSwgMjAwKTtcbn07XG5cblVsQmFja2dyb3VuZGVkLnByb3RvdHlwZS5hZGRMaSA9IGZ1bmN0aW9uKGV2LCBkYXRhKSB7XG4gICAgdmFyIG1vdmVkT2JqID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoZGF0YSksXG4gICAgICAgIGNsb25lT2JqID0gbW92ZWRPYmouY2xvbmVOb2RlKHRydWUpO1xuXG4gICAgY2xvbmVPYmoucmVtb3ZlQXR0cmlidXRlKCdpZCcpO1xuXG4gICAgaWYodGhpcy5nZXRVbE9iamVjdCgpLmNoaWxkRWxlbWVudENvdW50ID09PSAwKSB7XG4gICAgICAgIGV2LnRhcmdldC5hcHBlbmRDaGlsZChtb3ZlZE9iaik7XG4gICAgfWVsc2Uge1xuICAgICAgICBldi50YXJnZXQucGFyZW50RWxlbWVudC5hcHBlbmRDaGlsZChtb3ZlZE9iaik7XG4gICAgfVxuXG4gICAgZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgnYi1saXN0JylbMF0uYXBwZW5kQ2hpbGQoY2xvbmVPYmopO1xuICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGRhdGEpLnJlbW92ZUF0dHJpYnV0ZSgnaWQnKTtcblxuICAgIG5ldyBMaXN0KGNsb25lT2JqKS5pbml0KCk7XG59OyIsIlxudmFyIHVsTGVuID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgnYi1saXN0JykubGVuZ3RoLFxuICAgIGxpTGVuID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgnYi1saXN0LWl0ZW0nKS5sZW5ndGgsXG4gICAgbGlBcnIgPSBbXTtcblxuZm9yKHZhciBpPXVsTGVuOyBpLS07KSB7XG4gICAgdmFyIHVsSXRlbSA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJ2ItbGlzdCcpW2ldLFxuICAgICAgICB1bE9iajtcblxuXG4gICAgaWYgKGk9PT0yKSB7XG4gICAgICAgIHVsT2JqID0gbmV3IFVsQmFja2dyb3VuZGVkKHVsSXRlbSk7XG4gICAgfVxuICAgIGVsc2UgaWYgKGk9PT0xKSB7XG4gICAgICAgIHVsT2JqID0gbmV3IFVsQm9yZGVyZWQodWxJdGVtKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHVsT2JqID0gbmV3IFVsKHVsSXRlbSk7XG4gICAgfVxuICAgIHVsT2JqLmluaXQoKTtcbn1cblxuZm9yKHZhciBqPWxpTGVuOyBqLS07KSB7XG4gICAgdmFyIGxpSXRlbSA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJ2ItbGlzdC1pdGVtJylbal0sXG4gICAgICAgIGxpT2JqID0gbmV3IExpc3QobGlJdGVtKTtcblxuICAgIGxpT2JqLmluaXQoKTtcblxuICAgIGxpQXJyLnB1c2gobGlPYmopO1xufSJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==
